<?php

/**
 * Session handler for storing sessions to Redis
 *
 * Redis is an extremely fast in-memory data-store. Using it allows PW installations running on different machines to
 * access a centralised session server.
 *
 * @see /wire/core/SessionHandler.php
 * @see /wire/modules/Session/SessionHandlerDB.module
 *
 * Copyright (c) 2014 Stephen Dickinson, QBox.
 *
 * The above copyright notice and the following permissions and disclaimer shall be included in all copies or
 * substantial portions of the Software.
 *
 * DO NOT DISTRIBUTE UNLESS PERMITTED UNDER THE TERMS OF YOUR LICENSE FROM QBox.co.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

class SessionHandlerRedis extends WireSessionHandler implements Module/*, ConfigurableModule */
{

    public static function getModuleInfo()
    {
        return array(
            'title'    => __('Session Handler Redis', __FILE__),
            'version'  => 1,
            'summary'  => __("Installing this module makes ProcessWire store sessions in a Redis database rather than the file system. Note that this module will log you out after install or uninstall.", __FILE__),
            'author'   => 'S. Dickinson, QBox.co',
            'autoload' => true,
            'singular' => true,
        );
    }


    /**
     * Quick reference to redis
     *
     */
    protected $redis = null;



    /**
     *
     */
    public function open($path, $name)
    {
        if (null === $this->redis) {

            // Read/set the config values from the defaults if not defined in the config file...
            if (!$this->config->has('redis_session_server_ip')) {
                $this->config->set('redis_session_server_ip', '127.0.0.1');
            }

            if (!$this->config->has('redis_session_server_port')) {
                $this->config->set('redis_session_server_port', 6379);
            }

            if (!$this->config->has('redis_session_server_db')) {
                $this->config->set('redis_session_server_db', 0);
            }

            if (!$this->config->has('redis_session_server_ttl')) {
                $this->config->set('redis_session_server_ttl', 1800);
            }

            if (!$this->config->has('redis_session_server_prefix')) {
                $this->config->set('redis_session_server_prefix', 'PHPSESSID:');
            }

            $this->redis = new \Redis();
            $this->redis->pconnect($this->config->redis_session_server_ip, $this->config->redis_session_server_port);
            $this->redis->select($this->config->redis_session_server_db);
        }

        return true;
    }


    public function close() {
        if (null !== $this->redis) {
            unset($this->redis);
            $this->redis = null;
        }

        return true;
    }


    protected function key($id)
    {
        return $this->config->redis_session_server_prefix . $id;
    }


    /**
     * Read and return data for session indicated by $id
     *
     * @param string $id Session ID
     * @return string Serialized data or blank string if none
     *
     */
    public function read($id)
    {
        $key = $this->key($id);
        $data = $this->redis->get($key);
        $this->redis->expire($key, $this->config->redis_session_server_ttl);
        return $data;
    }


    /**
     * Write the given $data for the given session ID
     *
     * @param string $id Session ID
     * @param string Serialized data to write
     * @return bool
     *
     */
    public function write($id, $data)
    {
        $key = $this->key($id);
        $this->redis->set($key, $data);
        $this->redis->expire($key, $this->config->redis_session_server_ttl);
        return true;
    }


    /**
     * Destroy the session indicated by the given session ID
     *
     * @param string $id Session ID
     * @return bool True on success, false on failure
     *
     */
    public function destroy($id)
    {
        $key = $this->key($id);
        $this->redis->del($key);
        setcookie(session_name(), '', time()-3600);
        return true;
    }


    /**
     * Garbage collection: remove stale sessions
     *
     * @param int $seconds Max lifetime of a session
     * @return bool True on success, false on failure
     *
     */
    public function gc($seconds)
    {
        // Intentionally empty. We use the Redis TTL feature to do garbage collection.
    }


    /**
     * Session Handler Redis configuration options
     *
     */
    /* public static function getModuleConfigInputfields(array $data) */
    /* { */
    /*     $fields = new InputfieldWrapper(); */
    /*     $data   = array_merge(self::$defaultSettings, $data); */
    /*     $m      = wire('modules'); */

    /*     $f = $m->get("InputfieldMarkup"); */
    /*     $f->label = __("Redis Configuration Notes.", __FILE__); */
    /*     $f->value = __( */
    /*         "<p>Please supply details of the Redis server you'd like to host your sessions on.<br>" . */
    /*         "By default Redis listens on 127.0.0.1 port 6379 but is often listening on specific IP addresses.</p>", */
    /*         __FILE__); */
    /*     $fields->add($f); */

    /*     $f = $m->get("InputfieldText"); */
    /*     $f->attr('name', 'shr_server_ip'); */
    /*     $f->attr('value', $data['shr_server_ip']); */
    /*     $f->label = __("The IPv4 address of the Redis server hosting your sessions.", __FILE__); */
    /*     $fields->add($f); */

    /*     $f = $m->get("InputfieldInteger"); */
    /*     $f->attr('name', 'shr_server_port'); */
    /*     $f->attr('value', $data['shr_server_port']); */
    /*     $f->label = __("The port that your Redis server is listening on.", __FILE__); */
    /*     $fields->add($f); */

    /*     $f = $m->get("InputfieldInteger"); */
    /*     $f->attr('name', 'shr_server_db'); */
    /*     $f->attr('value', $data['shr_server_db']); */
    /*     $f->label = __("The redis database to use for storing session entries. If in doubt leave as '0'.", __FILE__); */
    /*     $fields->add($f); */

    /*     $f = $m->get("InputfieldText"); */
    /*     $f->attr('name', 'shr_prefix'); */
    /*     $f->attr('value', $data['shr_prefix']); */
    /*     $f->label = __("What prefix is to be used when creating the redis storage key from a session ID?", __FILE__); */
    /*     $fields->add($f); */

    /*     $f = $m->get("InputfieldInteger"); */
    /*     $f->attr('name', 'config->redis_session_server_ttl'); */
    /*     $f->attr('value', $data['config->redis_session_server_ttl']); */
    /*     $f->label = __("How long (in seconds) should idle sessions live for before they die?", __FILE__); */
    /*     $fields->add($f); */

    /*     return $fields; */
    /* } */


    /**
     * Provides direct reference access to set values in the $data array
     *
     * For some reason PHP 5.4+ requires this, as it apparently doesn't see WireData
     *
     */
    public function __set($key, $value)
    {
        $this->set($key, $value);
    }


    /**
     * Provides direct reference access to variables in the $data array
     *
     * For some reason PHP 5.4+ requires this, as it apparently doesn't see WireData
     *
     * Otherwise the same as get()
     *
     * @param string $key
     *
     */
    public function __get($key)
    {
        return $this->get($key);
    }
}
